{"name":"Grunt-preload-assets","tagline":"A Grunt plugin for generating preload assets manifest files","body":"# grunt-preload-assets\r\n\r\n> A Grunt plugin for generating preload assets manifest files.\t\r\n> Supports [PreloadJS](http://www.createjs.com/#!/PreloadJS), [PxLoader](http://thinkpixellab.com/pxloader/), JSON, JS, CSV, and unlimited support for multiple formats by using [underscore templates](http://www.2ality.com/2012/06/underscore-templates.html).\r\n> By [@gunta](https://github.com/gunta/).\r\n\r\n\r\n## Getting Started\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n\r\nAdd to your `package.json` entry:\r\n\r\n```\r\n\"grunt-preload-assets\": \"git+ssh://git@github.com:gunta/grunt-preload-assets.git\"\r\n```\r\n\r\nOr just use:\r\n```shell\r\nnpm install git+ssh://git@github.com:gunta/grunt-preload-assets.git --save-dev\r\n```\r\n\r\n## Preload Assets task\r\n_Run this task with the `grunt preload_assets` command._\r\n\r\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\r\n\r\n### Options\r\n\r\n#### template\r\nType: `String`\t\r\nChoices: \t\r\n\r\n* `preloadjs`\r\n* `pxloader`\r\n* `json`\r\n* `json-idaskey`\r\n* `csv`\r\n* `custom-sample`\r\n* Or a path to a template file.\t\t\r\n\r\nDefault: `json`\r\n\r\nSelects a template for generating the assets list.\r\nThe output can be customized by creating your own [underscore template](http://www.2ality.com/2012/06/underscore-templates.html). \r\n\r\n\r\n#### detect\r\nType: `Object`\r\n\r\nAn object containing properties to analyze and include from the assets. \r\n\r\n* #####id\r\n\tType: `Boolean`\t\t\r\n\tDefault: `true`\r\n\t\r\n\tIncludes an **identifier** in the output. \t\r\n\tBy default, it **camelizes the filename and removes the extension**.\r\n\t\r\n* #####src\r\n\tType: `Boolean`\t\t\r\n\tDefault: `true`\r\n\t\r\n\tIncludes the file path.\r\n\t\r\n* #####type\r\n\tType: `Boolean`\t\t\r\n\tDefault: `true`\r\n\t\r\n\tAnalyzes each asset file type and includes it. \t\r\n\tBy default, the supported file types are `IMAGE` `SOUND` `JSON` `XML` `CSS` `JAVASCRIPT` `SVG` and `TEXT`.\r\n\t\r\n* #####bytes\t\r\n\tType: `Boolean`\t\t\r\n\tDefault: `false`\t\r\n\t\r\n\tIncludes each asset file size **in bytes**.\t\t\r\n\tUseful when creating realistic progress bars.\r\n\t\r\n* #####totalBytes\t\r\n\tType: `Boolean`\t\t\r\n\tDefault: `false`\t\r\n\t\r\n\tIncludes the sum of all assets file sizes **in bytes**. \t\r\n\tUseful when creating realistic progress bars.\r\n\t\r\n* #####lastModified\t\r\n\tType: `Boolean`\t\t\r\n\tDefault: `false`\t\r\n\t\r\n\tIncludes each asset file last modified timestamp **in unixtime**. \t\r\n\tUseful when comparing file changes or implementing a cache system.\r\n\t\r\n* #####md5\t\r\n\tType: `Boolean`\t\t\r\n\tDefault: `false`\t\r\n\t\r\n\tIncludes each asset file **md5 hash** trimmed to the first **8 chars**.\t\t\r\n\tUseful when creating a cache system more reliable than one based on timestamps or checking integrity. \r\n\t\r\n* #####base64\t\r\n\tType: `Boolean`\t\t\r\n\tDefault: `false`\t\r\n\t\r\n\tIncludes each entire asset file encoded in a **base64 string**.\t\t\r\n\tUseful when the asset file sizes are small, to reduce http requests.\r\n\t\r\n* #####dimensions\t\r\n\tType: `Boolean`\t\t\r\n\tDefault: `false`\t\r\n\t\r\n\tFor `IMAGE` files: Includes each asset file `width` and `height` **in pixels**.\t\t\r\n\tUseful so one doesn't need to manually write the width/height everytime for each file.\r\n\t\r\n\t*Currently this only works on OS X.*\r\n\t\r\n*Note that not every template needs to add support to all these properties.*\r\n\t\r\n\r\n### Advanced Options\r\n\r\n#### key\r\nType: `String`\t\r\nDefault: `filesManifest`\r\n\r\nSpecifies a key name for the root container.\r\n\r\n####ignoreBasePath\r\nType: `String`\t\r\nDefault: `undefined`\r\n\r\nIgnores a specific base path from the specified `src`.\r\n\r\n#### process\r\nType: `Object`\r\n\r\nAn object containing functions to override the default behaviour of **detect**. \r\n\r\nBy default it includes the following object.\r\n\r\n```js\r\nprocess: {\r\n\tsrc: function (file) {\r\n\t\treturn file;\r\n\t},\r\n\tid: function (file) {\r\n\t\treturn scan.idBasedOnFilenameCamelized(file);\r\n\t},\r\n\ttype: function (file) {\r\n\t\treturn scan.typeByExtension(file);\r\n\t},\r\n\tbytes: function (file) {\r\n\t\treturn scan.fileSizeInBytes(file);\r\n\t},\r\n\ttotalBytes: function (bytes) {\r\n\t\treturn bytes;\r\n\t},\r\n\tdimensions: function (file) {\r\n\t\treturn scan.dimensionsInPixels(file);\r\n\t},\r\n\tmd5: function (file) {\r\n\t\treturn scan.md5hash(file, 8);\r\n\t},\r\n\tlastModified: function (file) {\r\n\t\treturn scan.lastModifiedUnixTime(file);\r\n\t},\r\n\tbase64: function (file) {\r\n\t\treturn scan.base64encode(file);\r\n\t}\r\n}\r\n```\r\n\r\n## Usage examples\r\n\r\n### Basic usage\r\n\r\n```js\r\n// Project configuration.\r\ngrunt.initConfig({\r\n  preload_assets: {\r\n    my_target: {\r\n      files: {\r\n        'dest/filesmanifest.js': ['src/*.png', 'src/*.jpg']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nWill produce something like this:\r\n\r\n```js\r\nvar filesManifest = [\r\n\t{id: 'genericButton', src: 'genericButton.png', type: createjs.LoadQueue.IMAGE},\r\n\t{id: 'genericButtonOver', src: 'genericButtonOver.png', type: createjs.LoadQueue.IMAGE},\r\n\t{id: 'parallaxHill1', src: 'parallaxHill1.png', type: createjs.LoadQueue.IMAGE},\r\n\t{id: 'sky', src: 'sky.png', type: createjs.LoadQueue.IMAGE},\r\n\t{id: 'image2', src: 'image2.jpg', type: createjs.LoadQueue.IMAGE}\r\n];\r\n```\r\n\r\n\r\n\r\n## Release History\r\n\r\n### 0.1.1\r\n\r\n- Added timestamp support\r\n- Added base64 support\r\n- Added md5 support\r\n- Added flag for optional switching of options\r\n- Added JSON template, with key and array version\r\n- Added CSV support\r\n- Added totalBytes support\r\n- Replaced lodash with grunt.util._\r\n\r\n\r\n## Roadmap\r\n\r\n### 0.1.2\r\n\r\n- Consider ignoreBasePath naming -> CONSIDER USING ~ new syntax\r\n- Consider file templates vs. string templates, processId\r\n- Refactor functions\r\n- Add PxLoader template\r\n- Write docs\r\n\r\nDONE:\r\n- Add image width and height support\r\n\r\n### 0.1.3\r\n- Add image sprites support\r\n- Add TexturePacker JSON and sprites support\r\n- Add image jpeg+alpha support\r\n- Add jpeg+alpha sprites support\r\n- Consider id generation by groups\r\n- Look for other IDs, id duplication\r\n- Add video specs support\r\n- Add audio template support (zynga audio library)\r\n\r\n### 0.1.4\r\n\r\n- Test with PreloadJS\r\n- Write template for other preloaders\r\n- Add check for not scanning heavy properties if lastModified is present\r\n- Add test suite\r\n- Publish npm\r\n- Add async support where possible\r\n- Add support for imagemagick\r\n- Add support for Windows\r\n- Remove dependency for execSync\r\n- Add template for grouping by filetype\r\n- Add support for remote file path (absolute)\r\n\r\n### 0.1.5\r\n- Create graphics\r\n- Contact Adobe for PreloadJS official endorsement and support\r\n- Contact grunt-preloader-manifest-generator author about duplicated work\r\n\r\n### 0.1.6\r\n- Add Grunt 0.5 support","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}